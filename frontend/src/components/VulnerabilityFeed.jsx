import React, { useState } from 'react';
import VulnerabilityDetails from './VulnerabilityDetails';

const VulnerabilityFeed = ({ vulnerabilities, onViewDetails }) => {
  const [selectedVulnId, setSelectedVulnId] = useState(null);

  const handleViewDetails = (vulnId) => {
    if (onViewDetails) {
      onViewDetails(vulnId);
    } else {
      setSelectedVulnId(vulnId);
    }
  };
  const getSeverityColor = (severity) => {
    const colors = {
      critical: 'border-l-red-500 bg-red-900/20',
      high: 'border-l-orange-500 bg-orange-900/20',
      medium: 'border-l-yellow-500 bg-yellow-900/20',
      low: 'border-l-blue-500 bg-blue-900/20'
    };
    return colors[severity] || 'border-l-gray-500 bg-gray-900/20';
  };

  const getSeverityBadge = (severity) => {
    const badges = {
      critical: 'bg-red-500 text-white',
      high: 'bg-orange-500 text-white',
      medium: 'bg-yellow-500 text-black',
      low: 'bg-blue-500 text-white'
    };
    return badges[severity] || 'bg-gray-500 text-white';
  };

  return (
    <div className="bg-gray-800 rounded-lg border border-gray-700 p-6">
      <h2 className="text-2xl font-bold text-white mb-4 flex items-center">
        <span className="mr-2">🔍</span>
        Live Vulnerability Feed
      </h2>
      <div className="space-y-3 max-h-[600px] overflow-y-auto custom-scrollbar">
        {vulnerabilities.length === 0 ? (
          <div className="text-center py-12">
            <div className="text-gray-500 text-lg">No vulnerabilities detected yet...</div>
            <div className="text-gray-600 text-sm mt-2">Start a scan to see results here</div>
          </div>
        ) : (
          vulnerabilities.map((vuln, index) => (
            <div
              key={vuln.id || index}
              className={`p-4 rounded-lg border-l-4 ${getSeverityColor(vuln.severity)} animate-slide-in backdrop-blur-sm cursor-pointer hover:bg-gray-700/30 transition-colors`}
              style={{ animationDelay: `${index * 0.05}s` }}
              onClick={() => handleViewDetails(vuln.id)}
            >
              <div className="flex justify-between items-start mb-2">
                <div className="flex-1">
                  <h3 className="text-white font-semibold text-lg">{vuln.type}</h3>
                  <p className="text-gray-400 text-sm mt-1">{vuln.title}</p>
                </div>
                <span className={`px-3 py-1 rounded-full text-xs font-bold ${getSeverityBadge(vuln.severity)} ml-4`}>
                  {vuln.severity.toUpperCase()}
                </span>
              </div>
              <div className="mt-1 text-xs text-gray-400">
                <span className="inline-flex items-center px-2 py-0.5 rounded-full bg-gray-700 mr-2">
                  🔎 Confidence: {Math.max(20, vuln.confidence || 0)}%
                </span>
                <span className="inline-flex items-center px-2 py-0.5 rounded-full bg-purple-700 text-white text-xs">
                  Click for details
                </span>
              </div>
              {vuln.preview && (
                <p className="text-gray-500 text-sm mt-2">{vuln.preview}</p>
              )}
              <div className="mt-3 flex items-center justify-between text-xs">
                <div className="flex items-center text-gray-500">
                  <span className="flex items-center mr-4">
                    <span className="mr-1">🎯</span>
                    Confidence: {vuln.confidence}%
                  </span>
                  {vuln.url && (
                    <span className="truncate max-w-xs">
                      <span className="mr-1">🔗</span>
                      {vuln.url}
                    </span>
                  )}
                </div>
                <span className="text-gray-600">
                  {new Date(vuln.timestamp * 1000).toLocaleTimeString()}
                </span>
              </div>
            </div>
          ))
        )}
      </div>
      
      {/* Vulnerability Details Modal */}
      {selectedVulnId && (
        <VulnerabilityDetails
          vulnerabilityId={selectedVulnId}
          onClose={() => setSelectedVulnId(null)}
        />
      )}
    </div>
  );
};

export default VulnerabilityFeed;